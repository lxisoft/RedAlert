/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.lxisoft.redalert.client.crimestopper.api;

import com.lxisoft.redalert.client.crimestopper.model.ComplaintDTOElasticSearch;
import com.lxisoft.redalert.client.crimestopper.model.UserDTOElasticSearch;
import com.lxisoft.redalert.client.crimestopper.model.ComplaintDTO;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-02-10T01:11:22.577+05:30[Asia/Calcutta]")

@Api(value = "ElasticSearchResource", description = "the ElasticSearchResource API")
public interface ElasticSearchResourceApi {

    @ApiOperation(value = "getAllComplaints", nickname = "getAllComplaintsUsingGET", notes = "", 
    		response = ComplaintDTOElasticSearch.class, responseContainer = "List", tags={ "elasticsearch-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ComplaintDTOElasticSearch.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/elasticsearch/complaints",
        produces = "*/*", 
        method = RequestMethod.GET)
    ResponseEntity<List<ComplaintDTOElasticSearch>> getAllComplaintsUsingGET(
    		@ApiParam(value = "eagerload", defaultValue = "false") @Valid @RequestParam(value = "eagerload", required = false, defaultValue="false") Boolean eagerload,
    		@ApiParam(value = "") @Valid @RequestParam(value = "offset", required = false) Long offset,
    		@ApiParam(value = "Page number of the requested page") @Valid @RequestParam(value = "page", required = false) Integer page,
    		@ApiParam(value = "") @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
    		@ApiParam(value = "") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
    		@ApiParam(value = "") @Valid @RequestParam(value = "paged", required = false) Boolean paged,
    		@ApiParam(value = "Size of a page") @Valid @RequestParam(value = "size", required = false) Integer size,
    		@ApiParam(value = "Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.") 
    								@Valid @RequestParam(value = "sort", required = false) List<String> sort,
    		@ApiParam(value = "") @Valid @RequestParam(value = "sort.sorted", required = false) Boolean sortSorted,
    		@ApiParam(value = "") @Valid @RequestParam(value = "sort.unsorted", required = false) Boolean sortUnsorted,
    		@ApiParam(value = "") @Valid @RequestParam(value = "unpaged", required = false) Boolean unpaged);
    
    
    
    @ApiOperation(value = "searchComplaintsBySubject", nickname = "searchComplaintsBySubjectUsingPost", notes = "", 
    		response = ComplaintDTOElasticSearch.class, responseContainer = "List", tags={ "elasticsearch-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ComplaintDTOElasticSearch.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/elasticsearch/complaints/searchBySubject",
        produces = "*/*",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<List<ComplaintDTOElasticSearch>> searchComplaintsBySubjectUsingPost(
    		@ApiParam(value = "complaint" ,required=true )  @Valid @RequestBody String searchTerm);

    
    
    @ApiOperation(value = "searchComplaintsByDescription", nickname = "searchComplaintsByDescriptionUsingPost", notes = "", 
    		response = ComplaintDTOElasticSearch.class, responseContainer = "List", tags={ "elasticsearch-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ComplaintDTOElasticSearch.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/elasticsearch/complaints/searchByDescription",
        produces = "*/*",
        consumes = "application/json",
        method = RequestMethod.POST)
    ResponseEntity<List<ComplaintDTOElasticSearch>> searchComplaintsByDescriptionUsingPost(
    		@ApiParam(value = "complaint" ,required=true )  @Valid @RequestBody String searchTerm);


    @ApiOperation(value = "searchUsresByTextPhrase", nickname = "searchUsresByTextPhraseUsingPost", notes = "", 
    		response = UserDTOElasticSearch.class, responseContainer = "List", tags={ "elasticsearch-resource", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserDTOElasticSearch.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/api/elasticsearch/users/search",
        produces = "*/*",
        consumes = "application/json",
        method = RequestMethod.POST)
	ResponseEntity<List<UserDTOElasticSearch>> searchUsresByTextPhraseUsingPost(
			@ApiParam(value = "complaint" ,required=true )  @Valid @RequestBody String searchTerm);
    



}
